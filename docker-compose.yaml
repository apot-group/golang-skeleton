x-networks: &golang-skeleton-networks
  - golang-skeleton-net
x-golang-skeleton-api-port: &golang-skeleton-api-port
  - "8080:8080"
x-golang-skeleton-redis-port: &golang-skeleton-redis-port
  - "6379:6379"
x-golang-skeleton-rabbitmq-port: &golang-skeleton-rabbitmq-port
  - "5672:5672"
  - "15672:15672"

version: '3.8'

services:
  api:
    build:
      context: ./x-api
      dockerfile: ./Dockerfile
    container_name: golang-skeleton-api
    restart: unless-stopped
    command: sh -c "./main"
    depends_on:
      - redis-service
      - rabbitmq-service
    ports: *golang-skeleton-api-port
    networks: *golang-skeleton-networks

  # ml:
  #   build:
  #     context: ./x-ml
  #     dockerfile: ./Dockerfile
  #   container_name: golang-skeleton-ml
  #   restart: unless-stopped
  #   command: sh -c "celery -A tasks worker --loglevel=info --concurrency=1 -E --logfile=logs/celery.log"
  #   volumes:
  #     - ./x-ml/app/:/app/
  #   depends_on:
  #     - redis-service
  #     - rabbitmq-service
  #   networks: *golang-skeleton-networks

  redis-service:
    image: redis:latest
    container_name: 'redis-service'
    restart: unless-stopped
    hostname: redis
    command: redis-server
    ports: *golang-skeleton-redis-port
    networks: *golang-skeleton-networks

  rabbitmq-service:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq-service'
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: ""
    ports: *golang-skeleton-rabbitmq-port
    networks: *golang-skeleton-networks

networks:
  golang-skeleton-net:
